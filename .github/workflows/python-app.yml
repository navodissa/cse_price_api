# @Author: Your name
# @Date:   2021-09-15 14:56:30
# @Last Modified by:   Your name
# @Last Modified time: 2021-09-19 15:52:40
# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ feature ]
  pull_request:
    branches: [ devel ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with DRF Test
      run: |
        python manage.py test
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:    # terraform_version: 0.13.0   Th3
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: Terraform Import
      id: imprt
      run: terraform import aws_key_pair.deployer navoda_me_keypair

    - name: Terraform Format  
      id: fmt  
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      # if: github.ref == 'refs/heads/devel' && github.event_name == 'push'
      id: apply
      run: |
        terraform apply -auto-approve

    - name: Getting Resource Details
      id: tf-res-details
      run: terraform output -raw public-dns > dns.txt

    - name: Upload dns result for job 1
      uses: actions/upload-artifact@v2
      with:
        name: dns
        path: dns.txt
  
  print:

    runs-on: ubuntu-latest

    needs: build
    steps:    
    - name: Print Resource Details
      uses: actions/download-artifact@v2
      with:
        name: dns
    - name: Running value
      run: cat dns.txt


